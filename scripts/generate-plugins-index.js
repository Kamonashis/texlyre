import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, "..");

import pluginsConfig from "../plugins.config.js";

function fixImportPaths(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');

    let updatedContent = content;

    // Fix all common import paths from extras/ to src/extras/
    const importReplacements = [
        // PluginInterface (from src/extras/*/index.ts to src/plugins/)
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/plugins\/PluginInterface['"]/g,
            to: "from '../../../plugins/PluginInterface'"
        },
        // SettingsContext
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/contexts\/SettingsContext['"]/g,
            to: "from '../../../contexts/SettingsContext'"
        },
        // Other contexts
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/contexts\/([^'"]+)['"]/g,
            to: "from '../../../contexts/$1'"
        },
        // Services
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/services\/([^'"]+)['"]/g,
            to: "from '../../../services/$1'"
        },
        // Components
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/components\/([^'"]+)['"]/g,
            to: "from '../../../components/$1'"
        },
        // Hooks
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/hooks\/([^'"]+)['"]/g,
            to: "from '../../../hooks/$1'"
        },
        // Utils
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/utils\/([^'"]+)['"]/g,
            to: "from '../../../utils/$1'"
        },
        // Any other src imports
        {
            from: /from ['"]\.\.\/\.\.\/\.\.\/src\/([^'"]+)['"]/g,
            to: "from '../../../$1'"
        }
    ];

    // Apply all replacements
    for (const replacement of importReplacements) {
        updatedContent = updatedContent.replace(replacement.from, replacement.to);
    }

    fs.writeFileSync(filePath, updatedContent);
}

function copyAndFixPlugins(srcDir, destDir) {
    if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
    }

    const items = fs.readdirSync(srcDir);

    for (const item of items) {
        const srcPath = path.join(srcDir, item);
        const destPath = path.join(destDir, item);

        if (fs.statSync(srcPath).isDirectory()) {
            copyAndFixPlugins(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);

            // Fix import paths in TypeScript files
            if (item.endsWith('.ts') || item.endsWith('.tsx')) {
                fixImportPaths(destPath);
            }
        }
    }
}

function generatePluginsIndex() {
    const imports = [];
    const exports = [];
    const pluginsByType = {};

    const srcExtrasDir = path.join(rootDir, "src", "extras");
    const rootExtrasDir = path.join(rootDir, "extras");

    // Create src/extras directory if it doesn't exist
    fs.mkdirSync(srcExtrasDir, { recursive: true });

    // Copy all extras content to src/extras and fix import paths
    console.log("Copying extras to src/extras and fixing import paths...");
    copyAndFixPlugins(rootExtrasDir, srcExtrasDir);

    // For each plugin path in the config
    for (const pluginPath of pluginsConfig.plugins) {
        const pathParts = pluginPath.split("/");
        const pluginName = pathParts[pathParts.length - 1];
        const pluginType = pathParts[0];
        const pluginVarName = `${pluginName}${pluginType.charAt(0).toUpperCase() + pluginType.slice(1)}Plugin`;

        imports.push(`import ${pluginVarName} from './${pluginPath}';`);
        exports.push(pluginVarName);

        if (!pluginsByType[pluginType]) {
            pluginsByType[pluginType] = [];
        }
        pluginsByType[pluginType].push(pluginVarName);
    }

    // Generate file content
    let content = `// This file is automatically generated. Do not edit directly.
// Generated on: ${new Date().toISOString()}

// Import all configured plugins
${imports.join("\n")}

// Export individual plugins
export {
${exports.map((name) => `  ${name}`).join(",\n")}
};

`;

    // Add type-based exports
    Object.entries(pluginsByType).forEach(([type, plugins]) => {
        if (plugins.length > 0) {
            content += `// Export ${type} plugins as a group
export const ${type} = {
${plugins.map((name) => `  ${name}`).join(",\n")}
};

`;
        }
    });

    // Write the index file to src/extras
    const outputPath = path.join(srcExtrasDir, "index.ts");
    fs.writeFileSync(outputPath, content);

    console.log(`Generated plugins index at ${outputPath}`);
}

// Run the generator
generatePluginsIndex();