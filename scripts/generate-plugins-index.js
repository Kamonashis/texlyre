// scripts/generate-plugins-index.js
import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, "..");

import pluginsConfig from "../plugins.config.js";

function generatePluginsIndex() {
	const imports = [];
	const exports = [];
	const pluginsByType = {};

	// For each plugin path in the config
	for (const pluginPath of pluginsConfig.plugins) {
		// Create a simple variable name based on the last part of the path
		const pathParts = pluginPath.split("/");
		const pluginName = pathParts[pathParts.length - 1]; // e.g., 'image'

		// Group by the first part of the path (viewers, formatters, etc.)
		const pluginType = pathParts[0];
		// Push name as in pluginName + pluginType + 'Plugin'
		const pluginVarName = `${pluginName}${pluginType.charAt(0).toUpperCase() + pluginType.slice(1)}Plugin`;

		imports.push(`import ${pluginVarName} from './${pluginPath}';`);
		exports.push(pluginVarName);

		if (!pluginsByType[pluginType]) {
			pluginsByType[pluginType] = [];
		}
		pluginsByType[pluginType].push(pluginVarName);
	}

	// Generate file content
	let content = `// This file is automatically generated. Do not edit directly.
// Generated on: ${new Date().toISOString()}

// Import all configured plugins
${imports.join("\n")}

// Export individual plugins
export {
${exports.map((name) => `  ${name}`).join(",\n")}
};

`;

	// Add type-based exports
	Object.entries(pluginsByType).forEach(([type, plugins]) => {
		if (plugins.length > 0) {
			content += `// Export ${type} plugins as a group
export const ${type} = {
${plugins.map((name) => `  ${name}`).join(",\n")}
};

`;
		}
	});

	// Write the file
	const outputPath = path.join(rootDir, "extras", "index.ts");
	fs.writeFileSync(outputPath, content);

	console.log(`Generated plugins index at ${outputPath}`);
}

// Run the generator
generatePluginsIndex();
